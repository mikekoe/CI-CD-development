version: 2.1
orbs: 
  slack: circleci/slack@4.10.1

commands:
  failure:
    steps:
      - slack/notify:
          channel:  udapeople-app-cicd
          event:  fail
          template: basic_fail_1

  success:
    steps:
      - slack/notify:
          channel:  udapeople-app-cicd
          event:  pass
          template: basic_success_1          

  deploy:
    steps:
      - slack/notify:
          channel:  udapeople-app-cicd
          event:  pass
          template: success_tagged_deploy_1 
  
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            python3 -m pip install --user ansible

jobs:
  build_frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-builder]
      - run:
          name: Build-frontend
          command: |
            cd frontend
            npm install
            npm run build
      - failure
      - success
      - deploy
  
  build_backend:
    docker:
      - image:  cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-builder]
      - run:
          name: Build-backend
          command: |
            cd backend
            npm install
            npm run build    
      - failure
      - success
      - deploy

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-builder]
      - run:
          name: Test-frontend
          command: |
            cd frontend
            npm install
            npm run test 
      - failure
      - success
      - deploy

  test-backend:
    docker:
      - image:  cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-builder]
      - run:
          name: Test-backend
          command: |
            cd backend
            npm install
            npm run test 
      - failure
      - success
      - deploy

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-builder]
      - run:
          name: Analyze-frontend
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - failure
      - success
      - deploy

  scan-backend:
    docker:
      - image:  cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-builder]
      - run:
          name: Analyze-backend
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - failure
      - success
      - deploy 

workflows:
  default:
    jobs:
      - build_frontend
      - build_backend
      - test-frontend:
          requires: [build_frontend]
      - test-backend:
          requires: [build_backend]
      - scan-frontend:
          requires: [build_frontend]
      - scan-backend:
          requires: [build_backend]
          

          
          
          

